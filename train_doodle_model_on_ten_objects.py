# -*- coding: utf-8 -*-
"""doodle_model_on_ten_objects.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QbQJlLidgOe_bKuqE65CoYDcKA7L0klL
"""

!mkdir data

cd data

!wget https://storage.googleapis.com/quickdraw_dataset/full/numpy_bitmap/apple.npy
!wget https://storage.googleapis.com/quickdraw_dataset/full/numpy_bitmap/pineapple.npy
!wget https://storage.googleapis.com/quickdraw_dataset/full/numpy_bitmap/grapes.npy
!wget https://storage.googleapis.com/quickdraw_dataset/full/numpy_bitmap/banana.npy
!wget https://storage.googleapis.com/quickdraw_dataset/full/numpy_bitmap/eye.npy
!wget https://storage.googleapis.com/quickdraw_dataset/full/numpy_bitmap/face.npy
!wget https://storage.googleapis.com/quickdraw_dataset/full/numpy_bitmap/star.npy
!wget https://storage.googleapis.com/quickdraw_dataset/full/numpy_bitmap/bowtie.npy
!wget https://storage.googleapis.com/quickdraw_dataset/full/numpy_bitmap/house.npy
!wget https://storage.googleapis.com/quickdraw_dataset/full/numpy_bitmap/cloud.npy

!ls

cd ..

from sklearn.model_selection import train_test_split as tts
from keras.models import Sequential
from keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten
from keras.utils import np_utils
from random import randint
import numpy as np
import os
from PIL import Image

# define some constants
N_FRUITS = 10
FRUITS = {0: "Apple", 1: "Banana", 2: "Grape", 3: "Pineapple",4:"eye", 5:"face",6:"star",7:"bowtie",8:"house",9:"cloud"}
 
# number of samples to take in each class
N = 5000
 
# some other constants
N_EPOCHS = 10
 
# data files in the same order as defined in FRUITS
files = ["apple.npy", "banana.npy", "grapes.npy", "pineapple.npy","eye.npy", "face.npy","star.npy","bowtie.npy","house.npy","cloud.npy"]

def load(dir_path, reshape_req, filenames):
    """Load .npy or .npz files from disk and return them as numpy arrays. 
    Takes in a list of filenames and returns a list of numpy arrays.
    """
 
    data = []
    for file in filenames:
        img_list = np.load(dir_path + file)
        if reshape_req:
            new_img_list = []
            for i in range(len(img_list)):
                img = np.reshape(img_list[i], (28, 28))
                img = np.expand_dims(img, axis=0)
                img = np.reshape(img_list[i], (28, 28, 1))
                new_img_list.append(img)
            img_list = new_img_list
        data.append(img_list)
    return data
 
 
def normalize(data):
    "Takes a list or a list of lists and returns its normalized form"
 
    return np.interp(data, [0, 255], [-1, 1])
 
 
def denormalize(data):
    "Takes a list or a list of lists and returns its denormalized form"
 
    return np.interp(data, [-1, 1], [0, 255])
 
 
def visualize(array):
    "Visulaze a 2D array as an Image"
    array = np.reshape(array, (28,28))
    img = Image.fromarray(array)
    return img
 
 
def set_limit(arrays, n):
    "Limit elements from each array up to n elements and return a single list"
    new = []
    for array in arrays:
        i = 0
        for item in array:
            if i == n:
                break
            new.append(item)
            i += 1
    return new
 
 
def make_labels(N1, N2):
    "make labels from 0 to N1, each repeated N2 times"
    labels = []
    for i in range(N1):
        labels += [i] * N2
    return labels

fruits = load("data/", True, ['star.npy'])

visualize(fruits[0][90])

#second argument is True for reshaping the image to a 28x28 form. A conv net expects this format.
fruits = load("data/",True, files)
#now every element of fruits array is a collection of images(28x28).



# limit no of samples in each class to N
fruits = set_limit(fruits, N)
#now every element of fruits array is an image(28x28), and we have N(=5000) images of each kind.

# normalize the values
fruits = map(normalize, fruits)

# define the labels
labels = make_labels(N_FRUITS, N)

# prepare the data
x_train, x_test, y_train, y_test = tts(fruits, labels, test_size=0.05)

# one hot encoding
Y_train = np_utils.to_categorical(y_train, N_FRUITS)
Y_test = np_utils.to_categorical(y_test, N_FRUITS)

model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28,28,1)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(N_FRUITS, activation='softmax'))

# model = Sequential()
# model.add(Dense(units=600, activation='relu', input_dim=784))
# model.add(Dropout(0.3))
# model.add(Dense(units=400, activation='relu'))
# model.add(Dropout(0.3))
# model.add(Dense(units=100, activation='relu'))
# model.add(Dropout(0.3))
# model.add(Dense(units=25, activation='relu'))
# model.add(Dropout(0.3))
# model.add(Dense(units=N_FRUITS, activation='softmax'))

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])
 
 
# train
model.fit(np.array(x_train), np.array(Y_train), batch_size=32, epochs=N_EPOCHS)
 
print "Training complete"
 
print "Evaluating model"
preds = model.predict(np.array(x_test))
 
score = 0
for i in range(len(preds)):
    if np.argmax(preds[i]) == y_test[i]:
        score += 1
 
print "Accuracy: ", ((score + 0.0) / len(preds)) * 100
 
 
model.save("fruits"+ ".h5")
print "Model saved"

print preds[0]

model.save('/content/drive/My Drive/doodle.h5')